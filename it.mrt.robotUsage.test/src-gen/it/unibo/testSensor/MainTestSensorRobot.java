/* Generated by AN DISI Unibo */ 
/*
 * ------------ SEMANTICS --------------------------------
 * A RobotSystem is composed of n>=0 contexts and one Robot
 * A Robot is a QActor that can execute commands 
 * A Robot is also able to receive commands via HTTP (another Mind)
 * A Conetxt is composed of QActors able to send commands to the robot 
 * or to emit events
 */  
package it.unibo.testSensor;
import it.unibo.qactors.ActorContext;
import java.io.InputStream;
import java.io.FileInputStream;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.contactEvent.platform.EventPlatformKb;
import it.unibo.system.SituatedSysKb;
import it.unibo.robotActor.sensors.SensorStreamSetter;
import it.unibo.robotActor.ui.TerminalHandlerExecutor;
import it.unibo.robotActor.usb.USBTetherClientStreamer;
import it.unibo.robotActor.utils.GuiUiKb;
import it.unibo.robotActor.utils.RobotSysKb;
import it.unibo.robotActor.web.RobotHttpServer;
import java.io.FileReader;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import alice.tuprolog.Theory;
public class MainTestSensorRobot extends ActorContext{
private USBTetherClientStreamer utUsb ;
private Invocable jsEngine;
private ScriptEngine engine;
private	int userCmd;
	public MainTestSensorRobot(String name, IOutputView outView,
			InputStream sysKbStream, InputStream sysRulesStream) throws Exception {
		super(name, outView, sysKbStream, sysRulesStream);
 	}
	@Override
	public void configure() {
		try {
			RobotSysKb.setRobotActor(this);
			AsynchActionKb.setAsynchActions();
			loadWorldTheory();
			println("=======================================");
			println("APPLICATION testsensor STARTS");
			println("=======================================");
			//platform = ContactEventPlatform.getPlatform();
			if( RobotSysKb.robotConfigMap.get(RobotSysKb.usbConnKey) ){
				//A robot context includes a active object that elaborates USB messages  
				utUsb = new USBTetherClientStreamer(outView);
	 		}
	 		if( RobotSysKb.robotConfigMap.get(RobotSysKb.httpConnKey) ){
				//A robot context includes a eventhandler that elaborates terminal events
				new TerminalHandlerExecutor("termhandle" , this, GuiUiKb.terminalCmd, outView);
				//A robot context includes a HTTP server on the port 8080
	 			RobotHttpServer server = new RobotHttpServer(outView,8080);
	 			server.start();
	 		}
	 		new UserSensorStreamSetter("sensstrmset",  outView, utUsb );
			new EventSimulator(outView,"prova1",1000).activate(SituatedSysKb.executorManyThread);
openNashorn();
 		} catch (Exception e) {
 			e.printStackTrace();
		} 		
	}
protected void openNashorn() throws Exception{
 	engine = new ScriptEngineManager().getEngineByName("nashorn");
	jsEngine = (Invocable) engine;		
	//println("jsEngine="+jsEngine);
	do{
 		engine.eval( new FileReader("./srcMore/robotInterpreter.js") );
 		Object result = jsEngine.invokeFunction( "moveRobot",   (Object[])null );
 		outView.addOutput("MainTestSensorRobot result "  + result );	
 		userCmd = waitForUserCommand( );
 		}while(userCmd != 'e' )	;
	outView.addOutput("bye bye"  );
	//	platform.raiseEvent("MainTestSensorRobot", EventPlatformKb.endOfJob, "mormalEnd");
	System.exit(1);
}
 protected int waitForUserCommand( )  {		
	try {
		int inp;
		int ch;
		outView.addOutput("USER>: to end press 'e'" );
		ch = System.in.read();
		outView.addOutput("user:" + ch);
		do{
			inp = System.in.read();
		}while( inp != 10 );
		return ch;			
	} catch (Exception e) {
		outView.addOutput("USER>: ERROR" );
		return 'e';
	}
}
	protected void loadWorldTheory() throws Exception{
		try{
	   		Theory worldTh = new Theory( new FileInputStream("src/WorldTheory.pl") );
	  		prologEngine.addTheory(worldTh);
	 		//println("loadWorldTheory done "   );
 		}catch( Exception e){
 			println("loadWorldTheory WARNING: "  + e.getMessage() );
 		}
 	}

/*
* ----------------------------------------------
* MAIN
* ----------------------------------------------
*/
	public static void main(String[] args) throws Exception{
		InputStream sysKbStream = new FileInputStream("testsensor.pl");
		InputStream sysRulesStream = new FileInputStream("sysRules.pl");
		new MainTestSensorRobot("testSensorRobot", EventPlatformKb.stdOutView, sysKbStream, sysRulesStream ).configure();
 	}
	
 
}//MainTestSensorRobot
